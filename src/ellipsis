#!/usr/bin/env bash

shopt -s nullglob

# Configuration
_repo=${ELLIPSIS_REPO:-$HOME/.ellipsis}
_target=${ELLIPSIS_TARGET:-$HOME}

main() {
	showUsage() {
		cat <<- 'EOF'
		Usage: ellipsis <verb>

		An interactive dotfile manager using GNU Stow

		<verb>
		  init      - Initialize ellipsis in the environment
		  mk        - Create a package
		  ls        - List available packages
		  mv        - Move a file/directory to be managed by ellipsis
		  add       - Add a pacakge to the environment
		  rm        - Remove a package from the environment
		EOF
	}

	# Parse global options
	while getopts 'h' flag; do
		case "$flag" in
			'h')
				showUsage
				exit 0
				;;
			'?')
				showUsage
				exit 1
				;;
		esac
	done

	# Capture the verb
	_verb=$1
	shift

	case "$_verb" in
		'init')
			verb_init "$@"
			;;
		'ls')
			verb_ls "$@"
			;;
		'mk')
			verb_mk "$@"
			;;
		'mv')
			verb_mv "$@"
			;;
		'add')
			verb_add "$@"
			;;
		'rm')
			verb_rm "$@"
			;;
		'')
			echo 'No verb specified'
			showUsage
			exit  1
			;;
		*)
			echo "Unknown verb: $_verb"
			showUsage
			exit 1
			;;
	esac
}

########
# INIT #
########

verb_init() {
	showUsage() {
		cat <<- EOF
		Usage: ellipsis init

		Inializes ellipsis on the current machine, if it is not currently
		configured.
		EOF
	}

	# Parse additional options
	while getopts 'h' flag; do
		case $flag in
			'h')
				showUsage
				exit 0
				;;
			'?')
				showUsage
				exit 1
				;;
		esac
	done

	# Check if ellipsis is already installed
	if [[ -e "$_repo" ]]; then
		debug "Ellipsis appears to already be initialized on this machine; $_repo is populated"
		exit 1
	fi

	# TODO: Initialize from GitHub repo

	# Initialize directories on machine
	if confirm "Initialize ellipsis using $_repo"; then
		mkdir -p "$_repo"
		exit 0
	else
		exit 1
	fi
}

######
# LS #
######

verb_ls() {
	showUsage() {
		cat <<- EOF
		Usage: ellipsis ls [-i]

		Lists all packages that are managed by ellipsis

		OPTIONS
		  -i - Only list the installed packages
		EOF
	}

	while getopts 'ih' flag; do
		case $flag in
			'i')
				_flag_i=1
				;;
			'h')
				showUsage
				exit 0
				;;
			'?')
				showUsage
				exit 1
				;;
		esac
	done

	if [[ $_flag_i -eq 1 ]]; then
		lsInstalledPackages
	else
		lsAllPackages
	fi
}

lsAllPackages() {
	for package in "$_repo"/*; do
		realpath --relative-to "$_repo" "$package"
	done
}

lsInstalledPackages() {
	find "$_target"/.* -maxdepth 5 -type l -print0 \
		| xargs -0 realpath 2>/dev/null \
		| grep -E "^$_repo" \
		| xargs realpath --relative-to "$_repo" \
		| cut -d / -f1 \
		| sort -u 
}

######
# MK #
######

verb_mk() {
	showUsage() {
		cat <<- 'EOF'
		Usage: ellipsis mk <package>

		Creates a new package to be managed by ellipsis

		<package> - The name of the package to create
		EOF
	}

	while getopts 'h' flag; do
		case "$flag" in
			'h')
				showUsage
				exit 0
				;;
			'?')
				showUsage
				exit 1
				;;
		esac
	done

	# Validate that package(s) was specified
	if [[ -z "$*" ]]; then
		debug "No package(s) specified"
		showUsage
		exit 1
	fi

	for package in "$@"; do
		mkdir -p "$_repo/$package"
	done
}

#######
# MV #
#######

verb_mv() {
	showUsage() {
		cat <<- 'EOF'
		Usage: ellipsis mv [-p <package>] <file> [<file>...]

		Specifies a file/directory to manage with ellipsis

		file - The file(s) that the user wants to begin managing using ellipsis

		OPTIONS
		  -p <package> - Specifies the file(s) should be added to <package>. If
		  unspecified, an interactive picker will be presented to the user.
		EOF
	}

	local package
	while getopts 'ph' flag; do
		case "$flag" in
			'p')
				package="$2"
				shift 2
				;;
			'h')
				showUsage 
				exit 0
				;;
			'?')
				showUsage
				exit 1
				;;
		esac
	done

	if [[ "$*" == "" ]]; then
		debug "No file(s) were specified for adoption"
		exit 1
	fi

	# If no package has been specified, prompt the user for one.
	if [[ -z "$package" ]]; then
		if ! package="$(lsAllPackages | pick)"; then
			debug "No package was specified"
			exit 1
		fi
	fi

	# Adopt the files into the specified package
	for file in "$@"; do
		_dst="$_repo/$package/$(realpath --relative-to "$_target" "$file")"
		mkdir -p "$(dirname "$_dst")"
		mv "$file" "$_dst"
		ln -s "$file" "$_dst"
	done

	install "$package"
}

#######
# ADD #
#######

verb_add() {
	showUsage() {
		cat <<- 'EOF'
		Usage: ellipsis add [<package>...]

		Add a package to the user's environment

		package - The package which should be installed. If none is specified,
		an interactive picker will be presented to the user.
		EOF
	}

	while getopts 'h' flag; do
		case "$flag" in
			'h')
				showUsage
				exit 0
				;;
			'?')
				showUsage
				exit 0
				;;
		esac
	done

	local packages="$*"

	# If no package is specified, prompt the user to pick one
	if [[ -z "$packages" ]]; then
		if ! packages=$(lsAllPackages | pick); then
			debug "No package specified"
			exit 1
		fi
	fi

	for package in $packages; do
		stow "$package"
	done
}

######
# RM #
######

verb_rm() {
	local package="$1"
	
	showUsage() {
		cat <<- 'EOF'
		Usage: ellipsis uninstall [<package>...]

		Removes a package from the user's environment

		package - The package which should be removed. If none is specified, an
		interactive picker will be presented to the user.
		EOF
	}

	while getopts 'h' flag; do
		case "$flag" in
			'h')
				showUsage
				exit 0
				;;
			'?')
				showUsage
				exit 1
				;;
		esac
	done

	local packages="$*"

	# If no package is specified, prompt the user to pick one
	if [[ -z "$packages" ]]; then
		if ! packages=$(lsAllPackages | pick); then
			debug "No package specified"
			exit 1
		fi
	fi

	for package in $packages; do
		stow --delete "$package"
	done
}

#########
# UTILS #
#########

confirm() {
	local prompt="$1"

	while true; do
		read -rp "$prompt (y/n): " answer
		case "$answer" in
			'y')
				return 0
				;;
			'n')
				return 1
				;;
		esac
	done
}

pick() {
	if command -v fzf &>/dev/null; then
		fzf
	else
		debug "No supported picker (e.g. fzf) is installed"
		return 1
	fi
}

fail() {
	echo "$@" >&2
	exit 1
}

debug() {
	echo "$@" >&2
}

stow() {
	command stow --dir "$_repo" --target "$_target" "$@"
}

main "$@"

